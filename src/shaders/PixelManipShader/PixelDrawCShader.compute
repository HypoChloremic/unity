// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "UnityCG.cginc"


struct position {
    float x;
    float y;
};
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWStructuredBuffer<position> PositionBuffer;

float DeltaTime;
float start = 0.0;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    for (int i = 0; i <50; i++){
        Result[uint2(PositionBuffer[0].x + i, PositionBuffer[0].y + i)] = float4(sin(PositionBuffer[0].x), 256, 256, 0.0);
    };

}
